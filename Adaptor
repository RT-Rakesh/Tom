from abc import ABC, abstractmethod

# Logger Output Adapter Interface
class LoggerOutputAdapter(ABC):
    @abstractmethod
    def write(self, message):
        pass

# Console Output Adapter
class ConsoleOutputAdapter(LoggerOutputAdapter):
    def write(self, message):
        print(message)

# File Output Adapter
class FileOutputAdapter(LoggerOutputAdapter):
    def __init__(self, filename):
        self.filename = filename

    def write(self, message):
        with open(self.filename, 'a') as f:
            f.write(message + '\n')

# Modified SingletonLogger
class SingletonLogger:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, adapter=None, log_level='INFO'):
        if not hasattr(self, '_initialized'):
            self._initialized = True
            self.adapter = adapter or ConsoleOutputAdapter()
            self.log_level = log_level.upper()
            self.log_levels = ['FATAL', 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE']

    def set_adapter(self, adapter):
        self.adapter = adapter

    def log_message(self, level, message):
        level = level.upper()
        if self.log_levels.index(level) <= self.log_levels.index(self.log_level):
            self.adapter.write(f'{level}: {message}')

